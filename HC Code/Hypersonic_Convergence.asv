clear all, clc, close all, format compact, format longG, tic;
%% Imports ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Constant Parameters
[C, SS, SH] = Constant_Parameters();

%% Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%% Input Paramters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Create New Incriment Structure for Starship and Superheavy
SSi = SS;   SHi = SH;   VehicleNo = 0;

% Mission Trade Variables (MTV) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% [MTon -> kg] Payload Weight
%Wpay = [100: 20: 150] * 1000;
Wpay = 0;

% [#int] Crew Members
Ncrew = 0;          % WILL NEED TO REMOVE

% [m^3/Person] Crew Specific Volume
kcrew = 0;          % WILL NEED OT REMOVE

% [km] Low Earth Parking Orbit
hleo = 0;           % WILL NEED TO REMOVE

% [m/s] Separation Velocity
v_sep = 1500;       % PROVIDE RANGE
 
% Iterated Geometric Values ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% Slenderness Parameter - Starship
%SS.tau = transpose([0.12: 0.02: 0.3]);
SS.tau = transpose([0.1: 0.05: 0.3]);
%SS.tau = 0.1;

% Slenderness Parameter - Superheavy
%SH.tau = transpose([0.12: 0.02: 0.3]);
SH.tau = SS.tau;

% Inital Guessed Values ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% [MTon -> kg] Takeoff Gross Weight - Starship
%SS_TOGWi = 1700 * 1000;
SS_TOGWi = 500 * 1000;

% [m^2] Planform Area - Starship
SS_Splni = 550;

% [MTon -> kg] Takeoff Gross Weight - Superheavy
%SH_TOGWi = 3800 * 1000;
SH_TOGWi = 500 * 1000;

% [m^2] Planform Area - Superheavy
SH_Splni = 650;

%% The Meat and the Bones ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Initial Conditions
x0 = [SS_TOGWi; SS_Splni];

% Set Optimization Options
tol = 1e-15;                                % Solver Tolerance           
options = optimoptions('lsqnonlin', ...
                'display','off', ...        % Disable Text Displayed in Console
                'TolFun', tol, ...          % Function Tolerance
                  'TolX', tol);             % Solution Tolerance

% Iterate Through Payload Weight
for a = 1: 1: length(Wpay)

    % Iterate Through LEO
    for d = 1: 1: length(hleo)

        % Iterate Through Separation Velocity
        for e = 1: 1: length(v_sep)

            % Iterate Through Starship tau Values
            for i = 1: 1: length(SS.tau)
                
                % Mission Parameters
                MTV.Wpay  = Wpay(a);
                MTV.Ncrew = Ncrew;
                MTV.kcrew = kcrew;
                MTV.hleo  = hleo;
                MTV.v_sep = v_sep(e);
                
                % Starship ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                % Starship Slenderness Parameter
                SSi.tau = SS.tau(i);

                % [kg, m^2] Solve Starship TOGW and Planform Area
                [x] = lsqnonlin(@(x) Solve_SS_OWE(C, MTV, SSi, x), x0, [], [], options);
                
                % [kg, m^2] Deal Solved Output Vector
                [SSi.TOGW, SSi.Spln] = deal(x(1), x(2));
                 
                % Calculate Starship Converged Parameters
                [SSi] = Calculate_Starship_Budget(C, MTV, SSi);
                
                % Check SS ERROR
                [ERROR_SS] = Solve_SS_OWE(C, MTV, SSi, x);
                if ERROR_SS(1) > 0.001 || ERROR_SS(2) > 0.001
                    ERROR_SS
                    disp('SS FAIL')

                else

                    % Iterate Through Superheavy tau Values
                    for f = 1: 1: length(SH.tau)
                        
                        % Superheavy Slenderness Parameter
                        SHi.tau = SH.tau(f);
    
                        % [kg, m^2] Solve Superheavy TOGW and Planform Area
                        [y] = lsqnonlin(@(x) Solve_SH_OWE(C, MTV, SHi, SSi, x), x0, [], [], options);
                        
                        % [kg, m^2] Deal Solved Output Vector
                        [SHi.TOGW, SHi.Spln] = deal(y(1), y(2));
                         
                        % Calculate Superheavy Converged Parameters
                        [SHi] = Calculate_Superheavy_Budget(C, MTV, SHi, SSi);
                     
                        % Save Converged Data ~~~~~~~~~~~~~~~~~~~~~~~~~~
                        
                        % Check SH ERROR
                        [ERROR_SH] = Solve_SH_OWE(C, MTV, SHi, SSi, y);
                        if ERROR_SH(1) > 0.001 || ERROR_SH(2) > 0.001
                            ERROR_SH
                            disp('SH FAIL')

                        else

                            % [int#] Creates Vehicle Counter
							VehicleNo = VehicleNo + 1;
                            
                            SHi.Swet
                            % Save Converged Starship and Superheavy Data
                            Vehicle.Chart(VehicleNo, :) = [Wpay(a), hleo, v_sep(e), SSi.tau, SHi.tau, SSi.TOGW, SSi.Spln, SSi.WR, SSi.Swet, SSi.Kw, SSi.TW0, SSi.OEW, SSi.OWEw, SSi.OWEv, SHi.TOGW, SHi.Spln, SHi.WR, SHi.Swet, SHi.Kw, SHi.TW0, SHi.OEW, SHi.OWEw, SHi.OWEv];
                            Vehicle.SS(VehicleNo) = SSi;
							Vehicle.SH(VehicleNo) = SHi;
                            
							% Puts data in to table thats easier to read
							% Define the table column names
							columnNames = {'Wpay', 'hleo', 'v_sep', 'SSi_tau', 'SHi_tau', ...
               							'SSi_TOGW', 'SSi_Spln', 'SSi_WR',   'SSi_Swet', 'SSi_Kw', ...
               							'SSi_TW0',  'SSi_OEW',  'SSi_OWEw', 'SSi_OWEv', ...
               							'SHi_TOGW', 'SHi_Spln', 'SHi_WR',   'SHi_Swet', 'SHi_Kw', ...
               							'SHi_TW0',  'SHi_OEW',  'SHi_OWEw', 'SHi_OWEv'};
							
							% Convert the numeric array to a table
							VehicleChartTable = array2table(Vehicle.Chart, 'VariableNames', columnNames);

                        end
                    end
                end
            end
        end
    end
end

%% Plots
close all

% Checks for Converged Vehicle
if VehicleNo == 0;

    % Print No Convergence
    fprintf('No Converged Vehicles\n')

else
    
    % Plot Properties
    P.Color = 'Black';
    
    % [kg, m^2] Plot OEW vs Planform Area
    Plot_Spln_vs_OEW(VehicleChartTable.SSi_Spln, VehicleChartTable.SSi_OEW, P);
    
    % [kg, m^2] Plot OEW vs Planform Area
    Plot_Spln_vs_OEW(VehicleChartTable.SHi_Spln, VehicleChartTable.SHi_OEW, P);

end

%% ~~~
%}
% Prints the simulation time on the command window.
fprintf('Program Complete! (%0.3f seconds)\n', toc);


% Check Calculations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%{
% Interested Mission Trade Matrix Increments
a = 2; b = 3; c = 4; d = 1;

% Interested tau Value
i = 7;

% Mission Parameters
MTV.Wpay  = Wpay(a);
MTV.Ncrew = Ncrew(b);
MTV.kcrew = kcrew(c);
MTV.hleo  = hleo(d);

% Starship Slenderness Parameter
SSi.tau = SS.tau(i);

% [kg, m^2] Deal Solved Output Vector
SSi.TOGW = Data.Wpay(a).Ncrew(b).kcrew(c).hleo(d).SS.TOGW(i);
SSi.Spln = Data.Wpay(a).Ncrew(b).kcrew(c).hleo(d).SS.Spln(i);

% Calculate Starship Converged Parameters
[SSval] = Calculate_Starship_Budget(C, MTV, SSi)
%}

                        % % SSi Output Parameters to Main Starship Structure
                        % SS.TOGW(i, :) = SSi.TOGW;       % [kg]  TOGW                - Starship
                        % SS.Spln(i, :) = SSi.Spln;       % [m^2] Planform Area       - Starship
                        % SS.WR(i, :)   = SSi.WR;         %       Weight Ratio        - Starship
                        % SS.Kw(i, :)   = SSi.Kw;         %       Swet to Spln Ratio  - Starship
                        % SS.TW0(i, :)  = SSi.TW0;        %       T/W at Sea Level    - Starship
                        % SS.OEW(i, :)  = SSi.OEW;        % [kg]  Operating Empty Weight (Dry Weight) - Starship 
                        % SS.OWEw(i, :) = SSi.OWEw;       % [kg]  Weight Budget - Starship 
                        % SS.OWEv(i, :) = SSi.OWEv;       % [kg]  Volume Budget - Starship 
                        % SS.Vppl(i, :) = SSi.Vppl;       % [m^3] Propellant Volume - Starship 
                        % SS.Wppl(i, :) = SSi.Wppl;       % [kg]  Propellant Weight - Starship 


                            % % SHi Output Parameters to Main Superheavy Structure
                            % SH.TOGW(f, :) = SHi.TOGW;       % [kg]  TOGW                - Superheavy
                            % SH.Spln(f, :) = SHi.Spln;       % [m^2] Planform Area       - Superheavy
                            % SH.WR(f, :)   = SHi.WR;         %       Weight Ratio        - Superheavy
                            % SH.Kw(f, :)   = SHi.Kw;         %       Swet to Spln Ratio  - Superheavy
                            % SH.TW0(f, :)  = SHi.TW0;        %       T/W at Sea Level    - Superheavy
                            % SH.OEW(f, :)  = SHi.OEW;        % [kg]  Operating Empty Weight (Dry Weight) - Superheavy 
                            % SH.OWEw(f, :) = SHi.OWEw;       % [kg]  Weight Budget - Superheavy 
                            % SH.OWEv(f, :) = SHi.OWEv;       % [kg]  Volume Budget - Superheavy 
                            % SH.Vppl(f, :) = SHi.Vppl;       % [m^3] Propellant Volume - Superheavy 
                            % SH.Wppl(f, :) = SHi.Wppl;       % [kg]  Propellant Weight - Superheavy 

%}